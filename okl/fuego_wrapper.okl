@kernel void production_rates(
    const int n_states,
    const double pressure_R,
    @restrict const double* temperature,
    @restrict const double* mass_fractions,
    @restrict double* mass_rates,
    @restrict double* energy_rate,
    const double reference_temperature,
    const double rcp_mass_rate,
    const double rcp_energy_rate)
{
  for(int id=0;id<n_states;++id;@tile(p_BLOCKSIZE,@outer,@inner)) { 
    dfloat wrk[__FG_NSPECIES__];
    dfloat molar_rates[__FG_NSPECIES__] = {0};

    const double T = reference_temperature * temperature[id];
    dfloat tc[6];  
    tc[0] = log(T);
    tc[1] = T;
    tc[2] = T*T;
    tc[3] = T*T*T;
    tc[4] = T*T*T*T;
    tc[5] = 1./T;

    double sum_active_mass_fractions = 0.;
    double mean_rcp_molar_mass = 0.;
    for(int k=0;k<__FG_NSPECIES__;k++) { 
      if (k != __FG_INERT_SPECIES__) {
        const double mass_fraction = fmax(0., mass_fractions[k*n_states + id]);
        wrk[k] = mass_fraction*fg_rcp_molar_mass[k];;
        sum_active_mass_fractions += mass_fraction;
        mean_rcp_molar_mass += wrk[k];
      }
    }
    wrk[__FG_INERT_SPECIES__] = (1 - sum_active_mass_fractions) * fg_rcp_molar_mass[__FG_INERT_SPECIES__];
    mean_rcp_molar_mass += wrk[__FG_INERT_SPECIES__];
    const double fac = pressure_R * tc[5] * 1/mean_rcp_molar_mass;
    for(int k=0;k<__FG_NSPECIES__;k++) wrk[k] *= fac;

    fg_rates(wrk, tc, molar_rates);
    fg_speciesEnthalpy_RT(wrk, tc);

    double energy_rate_RT = 0.0;
    for(int k=0;k<__FG_NSPECIES__;k++) {
        mass_rates[k*n_states + id] = rcp_mass_rate * fg_molar_mass[k] * molar_rates[k];
        energy_rate_RT += molar_rates[k] * wrk[k];
    }
    energy_rate[id] = rcp_energy_rate * tc[1] * energy_rate_RT;
  }
}

@kernel void number_of_species(@restrict int* nSpecies)
{
    for(int id=0;id<1;++id;@tile(p_BLOCKSIZE,@outer,@inner)) {
      nSpecies[0] = __FG_NSPECIES__;
    }
}

@kernel void mean_specific_heat_at_CP_R(const double T,
                                        @restrict const double* mole_fractions,
                                        @restrict double* mcp)
{
    for(int id=0;id<1;++id;@tile(p_BLOCKSIZE,@outer,@inner)) {
      mcp[0] = fg_mean_specific_heat_at_CP_R(T, mole_fractions);
    }
}

@kernel void molar_mass(@restrict double* mm)
{
    for(int id=0;id<1;++id;@tile(p_BLOCKSIZE,@outer,@inner)) {
      for(int i=0;i<__FG_NSPECIES__;i++) mm[i] = fg_molar_mass[i];
    }
}
