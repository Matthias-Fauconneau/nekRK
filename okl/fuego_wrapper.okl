@kernel void production_rates(
    const int n_states,
    const dfloat pressure_R,
    @restrict const dfloat* temperature,
    @restrict const dfloat* mass_fractions,
    @restrict dfloat* mass_rates,
    @restrict dfloat* energy_rate,
    const dfloat reference_temperature,
    const dfloat rcp_mass_rate,
    const dfloat rcp_energy_rate)
{
  for(int id=0;id<n_states;++id;@tile(p_blockSize,@outer,@inner)) { 
    dfloat wrk[n_species];
    dfloat molar_rates[n_species] = {0};

    const dfloat T = reference_temperature * temperature[id];
    //dfloat tc[] = { log(T), T, T*T, T*T*T, T*T*T*T, 1./T };
    dfloat tc[6];  
    tc[0] = log(T);
    tc[1] = T;
    tc[2] = T*T;
    tc[3] = T*T*T;
    tc[4] = T*T*T*T;
    tc[5] = 1./T;

    dfloat sum_active_mass_fractions = 0.;
    dfloat mean_rcp_molar_mass = 0.;
    for(int k=0;k<n_species;k++) { 
      if (k != inert_specie) {
        const dfloat mass_fraction = fmax(0., mass_fractions[k*n_states + id]);
        wrk[k] = mass_fraction*fg_rcp_molar_mass[k];;
        sum_active_mass_fractions += mass_fraction;
        mean_rcp_molar_mass += wrk[k];
      }
    }
    wrk[inert_specie] = (1 - sum_active_mass_fractions) * fg_rcp_molar_mass[inert_specie];
    mean_rcp_molar_mass += wrk[inert_specie];
    for(int k=0;k<n_species;k++) wrk[k] *= pressure_R * tc[5] / mean_rcp_molar_mass;

    fg_rates(wrk, tc, molar_rates);
    fg_speciesEnthalpy_RT(wrk, tc);

    dfloat energy_rate_RT = 0.0;
    for(int k=0;k<n_species;k++) {
        mass_rates[k*n_states + id] = rcp_mass_rate * fg_molar_mass[k] * molar_rates[k];
        energy_rate_RT += molar_rates[k] * wrk[k];
    }
    energy_rate[id] = rcp_energy_rate * T * energy_rate_RT;
  }
}

@kernel void number_of_species(@restrict int* nSpecies)
{
    for(int id=0;id<1;++id;@tile(p_blockSize,@outer,@inner)) {
      nSpecies[0] = n_species;
    }
}

@kernel void mean_specific_heat_at_CP_R(const dfloat T,
                                        @restrict const dfloat* mole_fractions,
                                        @restrict dfloat* mcp)
{
    for(int id=0;id<1;++id;@tile(p_blockSize,@outer,@inner)) {
      mcp[0] = fg_mean_specific_heat_at_CP_R(T, mole_fractions);
    }
}

@kernel void molar_mass(@restrict dfloat* mm)
{
    for(int id=0;id<1;++id;@tile(p_blockSize,@outer,@inner)) {
      for(int i=0;i<n_species;i++) mm[i] = fg_molar_mass[i];
    }
}
