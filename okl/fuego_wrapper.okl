@kernel void production_rates(
    const int n_states,
    const dfloat pressure_R,
    @restrict const dfloat* temperature,
    @restrict const dfloat* mass_fractions,
    @restrict dfloat* mass_rates,
    @restrict dfloat* energy_rate,
    const dfloat reference_temperature,
    const dfloat rcp_mass_rate,
    const dfloat rcp_energy_rate)
{
  for(int id=0;id<n_states;++id;@tile(p_blockSize,@outer,@inner)) {
    dfloat wrk[n_species];
    dfloat molar_rates[n_species] = {0};

    const dfloat T = reference_temperature * temperature[id];
    //dfloat Ts[] = { log(T), T, T*T, T*T*T, T*T*T*T, 1./T };
    dfloat Ts[6];
    Ts[0] = log(T);
    Ts[1] = T;
    Ts[2] = T*T;
    Ts[3] = T*T*T;
    Ts[4] = T*T*T*T;
    Ts[5] = 1./T;

    dfloat sum_active_mass_fractions = 0.;
    dfloat mean_rcp_molar_mass = 0.;
    for(int k=0;k<n_species;k++) {
      if (k != inert_specie) {
            const dfloat mass_fraction = fmax(0., mass_fractions[k*n_states + id]);
            wrk[k] = mass_fraction*fg_rcp_molar_mass[k];
            sum_active_mass_fractions += mass_fraction;
            mean_rcp_molar_mass += wrk[k];
      }
    }
    wrk[inert_specie] = (1 - sum_active_mass_fractions) * fg_rcp_molar_mass[inert_specie];
    mean_rcp_molar_mass += wrk[inert_specie];
    for(int k=0;k<n_species;k++) wrk[k] *= pressure_R * Ts[5] / mean_rcp_molar_mass;

    fg_rates(/*concentrations*/wrk, Ts, molar_rates);
    fg_enthalpy_RT(Ts, /*enthalpies*/wrk);

    dfloat energy_rate_RT = 0.0;
    for(int k=0;k<n_species;k++) {
        mass_rates[k*n_states + id] = rcp_mass_rate * fg_molar_mass[k] * molar_rates[k];
        energy_rate_RT += molar_rates[k] * wrk[k];
    }
    energy_rate[id] = rcp_energy_rate * T * energy_rate_RT;
  }
}

#if CFG_FEATURE_TRANSPORT
@kernel void transport(
    const int n_states,
    const dfloat pressure,
    @restrict const dfloat* temperature,
    @restrict const dfloat* mass_fractions,
    @restrict dfloat* viscosity,
    @restrict dfloat* thermal_conductivity,
    @restrict dfloat* rho_Di
)
{
    for(int id=0;id<n_states;++id;@tile(p_blockSize,@outer,@inner)) {
        const dfloat T = temperature[id];
        dfloat mass_fraction[n_species];
        for(int k=0;k<n_species;k++) {
            mass_fraction[k] = fmax(0., mass_fractions[k*n_states + id]);
        }
        dfloat mean_rcp_molar_mass = 0.;
        for(int i=0; i<n_species; i++) {
            mean_rcp_molar_mass += mass_fractions[i]*fg_rcp_molar_mass[i];
        }
        dfloat mean_molar_mass = 1./mean_rcp_molar_mass;
        dfloat mole_fractions[n_species];
        for(int i=0; i<n_species; i++) {
            mole_fractions[i] = mass_fractions[i]*fg_rcp_molar_mass[i]*mean_molar_mass;
        }

        viscosity[id] = fg_viscosity(T, mole_fractions);
        thermal_conductivity[id] = fg_thermal_conductivity(T, mole_fractions);

        dfloat rho_Di_[n_species];
        fg_rho_Di(pressure, T, mole_fractions, mass_fractions, mean_molar_mass, /*->*/ rho_Di_);
        for(int k=0;k<n_species;k++) {
            rho_Di[k*n_states + id] = rho_Di_[k];
        }
    }
}
#endif

@kernel void number_of_species(@restrict int* nSpecies)
{
    for(int id=0;id<1;++id;@tile(p_blockSize,@outer,@inner)) {
      nSpecies[0] = n_species;
    }
}

@kernel void mean_specific_heat_at_CP_R(const dfloat T,
                                        @restrict const dfloat* mole_fractions,
                                        @restrict dfloat* mcp)
{
    for(int id=0;id<1;++id;@tile(p_blockSize,@outer,@inner)) {
      mcp[0] = fg_mean_specific_heat_at_CP_R(T, mole_fractions);
    }
}

@kernel void molar_mass(@restrict dfloat* mm)
{
    for(int id=0;id<1;++id;@tile(p_blockSize,@outer,@inner)) {
      for(int i=0;i<n_species;i++) mm[i] = fg_molar_mass[i];
    }
}
