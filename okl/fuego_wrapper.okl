@kernel void production_rates(
    const int n_states,
    const float pressure_R,
    @restrict const float* temperature,
    @restrict const float* mass_fractions,
    @restrict float* mass_rates,
    @restrict float* energy_rate,
    const float reference_temperature,
    const float rcp_mass_rate,
    const float rcp_energy_rate)
{
  for(int id=0;id<n_states;++id;@tile(p_blockSize,@outer,@inner)) {
    float wrk[n_species];
    float sum_active_mass_fractions = 0.;
    float mean_rcp_molar_mass = 0.;
    for(int k=0;k<n_species-1;k++) {
        const float mass_fraction = fmax(0., mass_fractions[k*n_states + id]);
        wrk[k] = mass_fraction*fg_rcp_molar_mass[k];
        sum_active_mass_fractions += mass_fraction;
        mean_rcp_molar_mass += wrk[k];
    }
    wrk[n_species-1] = (1 - sum_active_mass_fractions) * fg_rcp_molar_mass[n_species-1];
    mean_rcp_molar_mass += wrk[n_species-1];

    const float T = reference_temperature * temperature[id];
    const float rcp_T = 1./T;
    const float concentration = pressure_R * rcp_T;
    for(int k=0; k < n_species; k++) wrk[k] *= concentration / mean_rcp_molar_mass;

    const float log_T = log2(T);
    const float T2 = T*T;
    const float T3 = T*T2;
    const float T4 = T*T3;
    const float K = 1.380649e-23; // J/kelvin
    const float NA = 6.02214076e23; // /mole
    const float reference_pressure = 101325. / (K*NA);
    const float P0_RT = reference_pressure * rcp_T;
    const float rcp_P0_RT = (1./reference_pressure) * T;
    float exp_Gibbs0_RT[n_species];
    printf("%f %f %f %f %f %f\n", log_T,T,T2,T3,T4,rcp_T);
    fg_exp_Gibbs_RT(log_T,T,T2,T3,T4,rcp_T, /*->*/ exp_Gibbs0_RT);
    const float rcp_T2 = rcp_T*rcp_T;
    float molar_rates[n_species-1];
    fg_rates(log_T,T,T2,T4,rcp_T,rcp_T2,P0_RT,rcp_P0_RT, exp_Gibbs0_RT, /*concentrations*/wrk, /*->*/ molar_rates);
    for(int k=0; k < n_species-1; k++) { printf("%e ", molar_rates[k]); } printf("\n");
    fg_enthalpy_RT(log_T,T,T2,T3,T4,rcp_T, /*-> enthalpy_RT*/wrk);

    float energy_rate_RT = 0.;
    for(int k=0; k < n_species-1; k++) {
        mass_rates[k*n_states + id] = rcp_mass_rate * fg_molar_mass[k] * molar_rates[k];
        energy_rate_RT += molar_rates[k] * wrk[k];
    }
    energy_rate[id] = rcp_energy_rate * T * energy_rate_RT;
  }
}

#if CFG_FEATURE_TRANSPORT
@kernel void transport(
    const int n_states,
    const float pressure,
    @restrict const float* temperature,
    @restrict const float* mass_fractions,
    @restrict float* viscosity,
    @restrict float* thermal_conductivity,
    @restrict float* rho_Di
)
{
    for(int id=0;id<n_states;++id;@tile(p_blockSize,@outer,@inner)) {
        const float T = temperature[id];
        float mass_fraction[n_species];
        for(int k=0;k<n_species;k++) {
            mass_fraction[k] = fmax(0., mass_fractions[k*n_states + id]);
        }
        float mean_rcp_molar_mass = 0.;
        for(int i=0; i<n_species; i++) {
            mean_rcp_molar_mass += mass_fractions[i]*fg_rcp_molar_mass[i];
        }
        float mean_molar_mass = 1./mean_rcp_molar_mass;
        float mole_fractions[n_species];
        for(int i=0; i<n_species; i++) {
            mole_fractions[i] = mass_fractions[i]*fg_rcp_molar_mass[i]*mean_molar_mass;
        }

        viscosity[id] = fg_viscosity(T, mole_fractions);
        thermal_conductivity[id] = fg_thermal_conductivity(T, mole_fractions);

        float Di[n_species];
        fg_mixture_diffusion_coefficients(mole_fractions, mass_fractions, T, /*-> Di*/ Di);
        const float K = 1.380649e-23; // J / K
        const float NA = 6.02214076e23;
        const float R = K*NA;
        float concentration = pressure/R/T;
        float density = concentration * mean_molar_mass;
        for(int k=0;k<n_species;k++) {
            rho_Di[k*n_states + id] = density * Di[k];
        }
    }
}
#endif

@kernel void number_of_species(@restrict int* nSpecies)
{
    for(int id=0;id<1;++id;@tile(p_blockSize,@outer,@inner)) {
      nSpecies[0] = n_species;
    }
}

@kernel void mean_specific_heat_at_CP_R(
    const float T,
    @restrict const float* mole_fractions,
    @restrict float* mcp) // Single value output
{
    for(int _=0;_<1;++_;@tile(p_blockSize,@outer,@inner)) { // Dummy loop. This subroutine is only used to interface with Fuego (CPU only)
        const float log_T = log2(T);
        const float T2 = T*T;
        const float T3 = T*T2;
        const float T4 = T*T3;
        const float rcp_T = 1./T;
        float Cp_R[n_species];
        fg_molar_heat_capacity_at_constant_pressure_R(log_T,T,T2,T3,T4,rcp_T, /*->*/ Cp_R);
        float sum = 0;
        for(int k=0; k<n_species; k++) {
            sum += Cp_R[k] * mole_fractions[k];
        }
        mcp[0] = sum;
    }
}

@kernel void molar_mass(@restrict float* mm) // [n_species]
{
    for(int _=0;_<1;++_;@tile(p_blockSize,@outer,@inner)) { // Dummy loop. This subroutine is only used to interface with Fuego (CPU only)
      for(int i=0;i<n_species;i++) mm[i] = fg_molar_mass[i];
    }
}
