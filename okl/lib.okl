#if CFG_FEATURE_TRANSPORT
@kernel void transport(
    const int n_states,
    const float pressure_Pa,
    @restrict const float* temperature_normalized,
    @restrict const float* mass_fractions,
    @restrict float* viscosity,
    @restrict float* thermal_conductivity,
    @restrict float* rho_Di,
    const float reference_temperature
)
{
    for(int id=0;id<n_states;++id;@tile(p_blockSize,@outer,@inner)) {
        const float T = reference_temperature * temperature_normalized[id];
        float mass_fraction[n_species];
        for(int k=0;k<n_species;k++) {
            mass_fraction[k] = fmax(0., mass_fractions[k*n_states + id]);
        }
        float mean_rcp_molar_mass = 0.;
        for(int i=0; i<n_species; i++) {
            mean_rcp_molar_mass += mass_fractions[i]*fg_rcp_molar_mass[i];
        }
        float mean_molar_mass = 1./mean_rcp_molar_mass;
        float mole_fractions[n_species];
        for(int i=0; i<n_species; i++) {
            mole_fractions[i] = mass_fractions[i]*fg_rcp_molar_mass[i]*mean_molar_mass;
        }

        float T_12 =	sqrt(T);
        float ln_T = log(T);
        float ln_T_2 = ln_T*ln_T;
        float ln_T_3 = ln_T_2*ln_T;
        viscosity[id] = T_12*fg_viscosity_T_12(ln_T, ln_T_2, ln_T_3, mole_fractions);
        thermal_conductivity[id] = T_12/2.*fg_thermal_conductivity_T_12_2(ln_T, ln_T_2, ln_T_3, mole_fractions);

        float T_32 = T*T_12;
        float P_T_32_mixture_diffusion_coefficients[n_species];
        fg_P_T_32_mixture_diffusion_coefficients(ln_T, ln_T_2, ln_T_3, mole_fractions, mass_fractions, /*->*/ P_T_32_mixture_diffusion_coefficients);
        const float K = 1.380649e-23; // J / K
        const float NA = 6.02214076e23;
        const float R = K*NA;
        float concentration = pressure_Pa/R/T;
        float density_T_32_P = concentration * mean_molar_mass * T_32 / pressure_Pa;
        for(int k=0;k<n_species;k++) {
            rho_Di[k*n_states + id] = density_T_32_P * P_T_32_mixture_diffusion_coefficients[k];
        }
    }
}
#else
@kernel void production_rates(
    const int n_states,
    const float pressure_R,
    @restrict const float* temperature,
    @restrict const float* mass_fractions,
    @restrict float* mass_rates,
    @restrict float* energy_rate,
    const float reference_temperature,
    const float rcp_mass_rate,
    const float rcp_energy_rate)
{
    for(int id=0;id<n_states;++id;@tile(p_blockSize,@outer,@inner)) {
        float wrk[n_species]; // mass fraction / molar mass
        float mean_rcp_molar_mass = 0.;
        for(int k=0; k<n_species; k++) {
            wrk[k] = fg_rcp_molar_mass[k] * fmax(0., mass_fractions[k*n_states + id]);
            mean_rcp_molar_mass += wrk[k];
        }

        const float T = reference_temperature * temperature[id];
        const float rcp_T = 1./T;
        const float concentration_times_mean_molar_mass = pressure_R * rcp_T / mean_rcp_molar_mass;
        for(int k=0; k < n_species; k++) wrk[k] = concentration_times_mean_molar_mass * wrk[k];

        const float log_T = log2(T);
        const float T2 = T*T;
        const float T3 = T*T2;
        const float T4 = T*T3;
        const float K = 1.380649e-23; // J/kelvin
        const float NA = 6.02214076e23; // /mole
        const float reference_pressure = 101325. / (K*NA);
        const float P0_RT = reference_pressure * rcp_T;
        const float rcp_P0_RT = (1./reference_pressure) * T;
        float exp_Gibbs0_RT[n_active_species];
        fg_exp_Gibbs_RT(log_T,T,T2,T3,T4,rcp_T, /*->*/ exp_Gibbs0_RT);
        const float rcp_T2 = rcp_T*rcp_T;
        float molar_rates[n_active_species];
        fg_rates(log_T,T,T2,T4,rcp_T,rcp_T2,P0_RT,rcp_P0_RT, exp_Gibbs0_RT, /*concentrations*/wrk, /*->*/ molar_rates);
        fg_enthalpy_RT(log_T,T,T2,T3,T4,rcp_T, /*-> enthalpy_RT*/wrk);

        float energy_rate_RT = 0.;
        for(int k=0; k < n_active_species; k++) {
            mass_rates[k*n_states + id] = rcp_mass_rate * fg_molar_mass[k] * molar_rates[k];
            energy_rate_RT += molar_rates[k] * wrk[k];
        }
        energy_rate[id] = rcp_energy_rate * T * energy_rate_RT;
    }
}
#endif

@kernel void mean_specific_heat_at_CP_R(
    const float T,
    @restrict const float* mole_fractions,
    @restrict float* mcp) // Single value output
{
    for(int _=0;_<1;++_;@tile(p_blockSize,@outer,@inner)) { // Dummy loop. This subroutine is only used to interface with Fuego (CPU only)
        const float log_T = log2(T);
        const float T2 = T*T;
        const float T3 = T*T2;
        const float T4 = T*T3;
        const float rcp_T = 1./T;
        float Cp_R[n_species];
        fg_molar_heat_capacity_at_constant_pressure_R(log_T,T,T2,T3,T4,rcp_T, /*->*/ Cp_R);
        float sum = 0;
        for(int k=0; k<n_species; k++) {
            sum += Cp_R[k] * mole_fractions[k];
        }
        mcp[0] = sum;
    }
}
